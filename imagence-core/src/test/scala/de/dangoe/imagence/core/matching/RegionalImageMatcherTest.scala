/**
  * Copyright (c) 2016 Daniel Götten
  * <p/>
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
  * in the Software without restriction, including without limitation the rights to
  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
  * of the Software, and to permit persons to whom the Software is furnished to
  * do so, subject to the following conditions:
  * <p/>
  * The above copyright notice and this permission notice shall be included in all
  * copies or substantial portions of the Software.
  * <p/>
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
package de.dangoe.imagence.core.matching

import java.awt.image.BufferedImage

import de.dangoe.imagence.api.ProcessingInput
import de.dangoe.imagence.api.matching.Anchor.PointOfOrigin
import de.dangoe.imagence.api.matching.Deviation.NoDeviation
import de.dangoe.imagence.api.matching.{Matcher, _}
import org.scalamock.scalatest.MockFactory
import org.scalatest.concurrent.ScalaFutures
import org.scalatest.time.{Millis, Seconds, Span}
import org.scalatest.{Matchers, WordSpec}

import scala.concurrent.Future

/**
  * @author Daniel Götten <daniel.goetten@googlemail.com>
  * @since 02.08.16
  */
class RegionalImageMatcherTest extends WordSpec with Matchers with ScalaFutures with MockFactory {

  import scala.concurrent.ExecutionContext.Implicits.global

  override implicit def patienceConfig = PatienceConfig(timeout = Span(2, Seconds), interval = Span(25, Millis))

  "A RegionalImageMatcher" must {
    "not accept processing inputs" when {
      "image size differs from reference image size." in {
        val sut = RegionalImageMatcher(stub[Slicer], stub[Matcher[MatchingResult]])

        whenReady(sut(ProcessingInput(emptyImage(320, 240), emptyImage(640, 480))).failed) {
          _ shouldBe a[MatchingNotPossible]
        }
      }
    }
  }

  it should {
    "slice images using the passed slicing strategy." in {
      val image = emptyImage(320, 240)
      val reference = emptyImage(320, 240)

      val slicer = mock[Slicer]
      (slicer.slice(_: BufferedImage)).expects(image).once().returns(Nil)
      (slicer.slice(_: BufferedImage)).expects(reference).once().returns(Nil)

      val input = ProcessingInput(image, reference)

      val sut = RegionalImageMatcher(slicer, stub[Matcher[MatchingResult]])

      whenReady(sut(input)) { result =>
        result.processingInput shouldBe input
        result.deviation shouldBe NoDeviation
      }
    }

    "match all created slice pairs using the passed matcher." in {
      val image = emptyImage(320, 240)
      val reference = emptyImage(320, 240)

      val imageSlice1 = Slice(emptyImage(160, 240), PointOfOrigin)
      val imageSlice2 = Slice(emptyImage(160, 240), PointOfOrigin)
      val referenceSlice1 = Slice(emptyImage(160, 240), PointOfOrigin)
      val referenceSlice2 = Slice(emptyImage(160, 240), PointOfOrigin)

      val slicer = stub[Slicer]
      (slicer.slice(_: BufferedImage)).when(image).once().returns(Seq(Future.successful(imageSlice1), Future.successful(imageSlice2)))
      (slicer.slice(_: BufferedImage)).when(reference).once().returns(Seq(Future.successful(referenceSlice1), Future.successful(referenceSlice2)))

      val matchingResult1 = stub[MatchingResult]
      (matchingResult1.deviation _).when().returns(NoDeviation)

      val matchingResult2 = stub[MatchingResult]
      (matchingResult2.deviation _).when().returns(NoDeviation)

      val matcher = mock[Matcher[MatchingResult]]
      (matcher.apply(_: ProcessingInput))
        .expects(ProcessingInput(imageSlice1.image, referenceSlice1.image)).once()
        .returns(Future.successful(matchingResult1))
      (matcher.apply(_: ProcessingInput))
        .expects(ProcessingInput(imageSlice2.image, referenceSlice2.image)).once()
        .returns(Future.successful(matchingResult2))

      val input = ProcessingInput(image, reference)

      val sut = RegionalImageMatcher(slicer, matcher)

      whenReady(sut(input)) { result =>
        result.processingInput shouldBe input
        result.deviation shouldBe NoDeviation
      }
    }

    "return the matching results generated by the passed matcher." in {
      val image = emptyImage(320, 240)
      val reference = emptyImage(320, 240)

      val imageSlice1 = Slice(emptyImage(160, 240), PointOfOrigin)
      val imageSlice2 = Slice(emptyImage(160, 240), Anchor(160, 240))
      val referenceSlice1 = Slice(emptyImage(160, 240), PointOfOrigin)
      val referenceSlice2 = Slice(emptyImage(160, 240), Anchor(160, 240))

      val matchingResult1 = stub[MatchingResult]
      val matchingResult2 = stub[MatchingResult]

      val slicer = stub[Slicer]
      (slicer.slice(_: BufferedImage)).when(image).once().returns(Seq(Future.successful(imageSlice1), Future.successful(imageSlice2)))
      (slicer.slice(_: BufferedImage)).when(reference).once().returns(Seq(Future.successful(referenceSlice1), Future.successful(referenceSlice2)))

      val matcher = stub[Matcher[MatchingResult]]
      (matcher.apply(_: ProcessingInput))
        .when(ProcessingInput(imageSlice1.image, referenceSlice1.image))
        .returns(Future.successful(matchingResult1))
      (matcher.apply(_: ProcessingInput))
        .when(ProcessingInput(imageSlice2.image, referenceSlice2.image))
        .returns(Future.successful(matchingResult2))

      val sut = RegionalImageMatcher(slicer, matcher)

      whenReady(sut.apply(ProcessingInput(image, reference))) { result =>
        result.processingInput shouldBe ProcessingInput(image, reference)
        result.regionalMatchingResults.length shouldBe 2
        result.regionalMatchingResults.head shouldBe RegionalMatchingResult(imageSlice1.region, matchingResult1)
        result.regionalMatchingResults.last shouldBe RegionalMatchingResult(imageSlice2.region, matchingResult2)
      }
    }
  }

  private def emptyImage(width: Int, height: Int): BufferedImage =
    new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB)
}
